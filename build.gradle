buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven {
            // Parchment
            url = "https://maven.parchmentmc.org"
        }
        maven {
            url "https://repo.spongepowered.org/repository/maven-public/"
            content { includeGroup "org.spongepowered" }
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+', changing: true
    }
}


apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'


def envVersion = System.getenv('VERSION')
version = envVersion == null ? '0.0.0-indev' : envVersion
group = 'com.lumintorious.tfcambiental' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'tfcambiental'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'parchment', version: '2023.06.26-1.20.1'
    //mappings channel: 'official', version: '1.20.1'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('run')
//            args '-mixin.config=firmalife.mixins.json'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                tfcambiental {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
//            args '-mixin.config=firmalife.mixins.json', '--nogui'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                tfcambiental {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
//            args '--mod', 'firmalife', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                tfcambiental {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven {
        // JEI
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // Mirror for JEI
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        // Patchouli
        name = "BlameJared"
        url = "https://maven.blamejared.com"
    }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }

    flatDir {
        dir 'libs'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    //implementation fg.deobf("tfc:TerraFirmaCraft-Forge-${minecraft_version}:${tfc_version}")

    implementation fg.deobf("curse.maven:terrafirmacraft-302973:4862659")

    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    }

    // Patchouli
    implementation fg.deobf("curse.maven:patchouli-306770:4636277")

    // JEI
    implementation "curse.maven:jei-238222:4712867"

    implementation "curios:curios-forge-5.4.2+1.20.1:api"
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "tfcambiental",
                "Specification-Vendor"    : "lumintorious",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "eerussianguy",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
//                "MixinConfigs": "firmalife.mixins.json"
        ])
    }
}

idea {
    module {
        excludeDirs.add(file("run"))
    }
}

mixin {
    add sourceSets.main, "tfcambiental.refmap.json"
    config("tfcambiental.mixins.json")
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}